name: Documentation

on:
  push:
    branches: [ main ]
    paths: 
      - 'README.md'
      - 'INSTALL.md'
      - 'docs/**'
      - '**.py'

jobs:
  docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install sphinx sphinx-rtd-theme
    
    - name: Validate README links
      run: |
        # Check that referenced files exist
        test -f INSTALL.md
        test -f notebooks/Patent_Intelligence_Platform_Demo.ipynb
        test -f requirements.txt
        test -f Pipfile
        echo "✅ All README references validated"
    
    - name: Check code examples in documentation
      run: |
        # Extract and validate Python code blocks from README
        python -c "
        import re
        with open('README.md', 'r') as f:
            content = f.read()
        
        # Find Python code blocks
        code_blocks = re.findall(r'```python\n(.*?)\n```', content, re.DOTALL)
        
        for i, code in enumerate(code_blocks):
            try:
                compile(code, f'readme_example_{i}', 'exec')
                print(f'✅ Code block {i+1} syntax valid')
            except SyntaxError as e:
                print(f'❌ Code block {i+1} syntax error: {e}')
                exit(1)
        "
    
    - name: Generate API documentation
      run: |
        # Create basic API documentation structure
        mkdir -p docs/api
        
        # Generate module documentation
        python -c "
        import inspect
        import importlib
        import os
        
        modules = ['config', 'data_access', 'processors', 'visualizations']
        
        for module_name in modules:
            try:
                module = importlib.import_module(module_name)
                doc_content = f'# {module_name.title()} Module\n\n'
                
                if hasattr(module, '__doc__') and module.__doc__:
                    doc_content += f'{module.__doc__}\n\n'
                
                # Add module members
                for name, obj in inspect.getmembers(module):
                    if not name.startswith('_') and inspect.isclass(obj):
                        doc_content += f'## {name}\n\n'
                        if obj.__doc__:
                            doc_content += f'{obj.__doc__}\n\n'
                
                with open(f'docs/api/{module_name}.md', 'w') as f:
                    f.write(doc_content)
                    
                print(f'✅ Generated docs for {module_name}')
            except Exception as e:
                print(f'⚠️ Could not generate docs for {module_name}: {e}')
        "
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/