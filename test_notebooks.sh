#!/bin/bash
# Notebooks Testing Script for Patent Analysis Platform
# Tests demo notebook readiness and validation

log_with_timestamp "üöÄ Patent Analysis Platform - Notebooks Test Suite"
log_with_timestamp "Enhanced from EPO PATLIB 2025 Live Demo Code"
log_with_timestamp "=================================================="
log_with_timestamp "Log file: $LOG_FILE"

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Setup logging
LOG_DIR="logs"
LOG_FILE="$LOG_DIR/notebooks_tests.log"
mkdir -p "$LOG_DIR"

# Function to log with timestamp
log_with_timestamp() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Function to run command with logging
run_with_logging() {
    log_with_timestamp "Starting: $1"
    eval "$1" 2>&1 | tee -a "$LOG_FILE"
    local exit_code=${PIPESTATUS[0]}
    log_with_timestamp "Completed: $1 (exit code: $exit_code)"
    return $exit_code
}

# Check if Python test scripts exist
if [[ ! -f "notebooks/test_notebook_cells.py" ]]; then
    echo "‚ùå Test script not found: notebooks/test_notebook_cells.py"
    exit 1
fi

if [[ ! -f "notebooks/Patent_Intelligence_Platform_Demo.ipynb" ]]; then
    echo "‚ùå Demo notebook not found: notebooks/Patent_Intelligence_Platform_Demo.ipynb"
    exit 1
fi

# Check Python version
echo ""
echo "üêç Python Environment Check"
echo "----------------------------"
python_version=$(python3 --version 2>&1)
if [[ $? -eq 0 ]]; then
    echo "‚úÖ Python version: $python_version"
else
    echo "‚ùå Python3 not found"
    exit 1
fi

# Check if virtual environment is active
if [[ -n "$VIRTUAL_ENV" ]]; then
    echo "‚úÖ Virtual environment: $(basename $VIRTUAL_ENV)"
else
    echo "‚ö†Ô∏è No virtual environment detected"
fi

# Check key dependencies for notebook execution
echo ""
echo "üì¶ Dependency Check for Notebook Execution"
echo "-------------------------------------------"

dependencies=("pandas" "numpy" "jupyter")
missing_deps=()

for dep in "${dependencies[@]}"; do
    python3 -c "import $dep" 2>/dev/null
    if [[ $? -eq 0 ]]; then
        version=$(python3 -c "import $dep; print($dep.__version__)" 2>/dev/null)
        echo "‚úÖ $dep: $version"
    else
        echo "‚ùå $dep: Not installed"
        missing_deps+=("$dep")
    fi
done

# Check notebook-specific dependencies
notebook_deps=("json" "pathlib")
for dep in "${notebook_deps[@]}"; do
    python3 -c "import $dep" 2>/dev/null
    if [[ $? -eq 0 ]]; then
        echo "‚úÖ $dep: Available"
    else
        echo "‚ùå $dep: Not available"
        missing_deps+=("$dep")
    fi
done

if [[ ${#missing_deps[@]} -gt 0 ]]; then
    echo ""
    echo "‚ö†Ô∏è Missing dependencies: ${missing_deps[*]}"
    echo "Please install missing packages:"
    echo "pip install ${missing_deps[*]}"
    echo ""
    read -p "Continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Check notebook testing infrastructure
echo ""
echo "üìì Notebook Testing Infrastructure Check"
echo "---------------------------------------"

notebook_files=(
    "notebooks/Patent_Intelligence_Platform_Demo.ipynb"
    "notebooks/test_notebook_cells.py"
    "notebooks/test_notebook_validation.py"
    "notebooks/notebook_fixed_cells.py"
    "notebooks/README.md"
)

for file in "${notebook_files[@]}"; do
    if [[ -f "$file" ]]; then
        if [[ "$file" == *.ipynb ]]; then
            cell_count=$(grep -c '"cell_type"' "$file" 2>/dev/null || echo "?")
            echo "‚úÖ $file ($cell_count cells)"
        else
            size=$(wc -l < "$file")
            echo "‚úÖ $file ($size lines)"
        fi
    else
        echo "‚ùå $file (missing)"
    fi
done

# Check platform integration
echo ""
echo "üîß Platform Integration Check"
echo "-----------------------------"

integration_modules=("config" "data_access" "processors" "visualizations")
for module in "${integration_modules[@]}"; do
    python3 -c "import $module" 2>/dev/null
    if [[ $? -eq 0 ]]; then
        echo "‚úÖ $module module available for notebook"
    else
        echo "‚ùå $module module import issues"
    fi
done

# Hierarchical Test Execution for Notebooks
echo ""
echo "üß™ Hierarchical Test Execution for Notebooks"
echo "============================================="
echo "Notebooks require the complete functional platform:"
echo "1Ô∏è‚É£ Config ‚Üí 2Ô∏è‚É£ Data Access ‚Üí 3Ô∏è‚É£ Processors ‚Üí 4Ô∏è‚É£ Analyzers ‚Üí 5Ô∏è‚É£ Visualizations ‚Üí 6Ô∏è‚É£ Notebooks"
echo ""

echo "Select test mode:"
echo "1) Notebook tests only (assumes full platform is functional)"
echo "2) Complete pipeline test (config ‚Üí data ‚Üí processors ‚Üí analyzers ‚Üí visualizations ‚Üí notebooks - recommended)"
echo "3) Quick notebook validation (basic cell syntax)"
echo "4) Demo readiness check (EPO PATLIB 2025 preparation)"
echo "5) Fix mode (show and apply fixes)"
echo ""

# Default to complete pipeline if no interaction
if [[ -t 0 ]]; then
    read -p "Choose option (1/2/3/4/5) [2]: " -n 1 -r
    echo
    choice="${REPLY:-2}"
else
    choice="2"
fi

case $choice in
    1)
        log_with_timestamp "Running notebook tests only (assumes platform is functional)..."
        echo "‚ö†Ô∏è Warning: This assumes the complete platform stack is functional"
        log_with_timestamp "Testing notebook execution simulation..."
        run_with_logging "timeout 600 python3 notebooks/test_notebook_validation.py"
        
        validation_exit_code=$?
        log_with_timestamp ""
        log_with_timestamp "Testing comprehensive cell validation..."
        run_with_logging "timeout 600 python3 notebooks/test_notebook_cells.py"
        
        cells_exit_code=$?
        
        # Use the worse of the two exit codes
        test_exit_code=$((validation_exit_code > cells_exit_code ? validation_exit_code : cells_exit_code))
        ;;
    2)
        log_with_timestamp "Running complete pipeline test with hierarchical execution..."
        echo ""
        
        # Step 1: Configuration Tests
        log_with_timestamp "Step 1/6: Testing Configuration Layer"
        echo "‚öôÔ∏è Ensuring configuration system works..."
        if ! run_with_logging "timeout 300 ./test_config.sh"; then
            log_with_timestamp "‚ùå Configuration tests failed - cannot proceed to notebooks"
            exit 1
        fi
        echo "‚úÖ Configuration layer validated"
        echo ""
        
        # Step 2: Data Access Tests
        log_with_timestamp "Step 2/6: Testing Data Access Layer"
        echo "üîç Ensuring data access functionality works..."
        if ! run_with_logging "timeout 300 ./test_data_access.sh"; then
            log_with_timestamp "‚ùå Data access tests failed - cannot proceed to notebooks"
            exit 1
        fi
        echo "‚úÖ Data access layer validated"
        echo ""
        
        # Step 3: Processor Tests
        log_with_timestamp "Step 3/6: Testing Processors"
        echo "‚öôÔ∏è Ensuring data processing functionality works..."
        if ! run_with_logging "timeout 600 ./test_processors.sh"; then
            log_with_timestamp "‚ùå Processor tests failed - cannot proceed to notebooks"
            exit 1
        fi
        echo "‚úÖ Processors validated"
        echo ""
        
        # Step 4: Analyzer Tests
        log_with_timestamp "Step 4/6: Testing Analyzers"
        echo "üìä Ensuring analysis functionality works..."
        if ! run_with_logging "timeout 600 ./test_analyzers.sh"; then
            log_with_timestamp "‚ùå Analyzer tests failed - cannot proceed to notebooks"
            exit 1
        fi
        echo "‚úÖ Analyzers validated"
        echo ""
        
        # Step 5: Visualization Tests
        log_with_timestamp "Step 5/6: Testing Visualizations"
        echo "üé® Ensuring visualization functionality works..."
        if ! run_with_logging "timeout 600 ./test_visualizations.sh"; then
            log_with_timestamp "‚ùå Visualization tests failed - cannot proceed to notebooks"
            exit 1
        fi
        echo "‚úÖ Visualizations validated"
        echo ""
        
        # Step 6: Notebook Tests (with complete functional platform)
        log_with_timestamp "Step 6/6: Testing Notebooks with Complete Functional Platform"
        echo "üìì Testing notebooks with fully validated platform..."
        
        log_with_timestamp "Step 6a: Notebook Execution Simulation"
        log_with_timestamp "------------------------------------"
        run_with_logging "timeout 600 python3 notebooks/test_notebook_validation.py"
        validation_exit_code=$?
        
        log_with_timestamp ""
        log_with_timestamp "Step 6b: Comprehensive Cell Validation"
        log_with_timestamp "-------------------------------------"
        run_with_logging "timeout 600 python3 notebooks/test_notebook_cells.py"
        cells_exit_code=$?
        
        # Use the worse of the two exit codes
        test_exit_code=$((validation_exit_code > cells_exit_code ? validation_exit_code : cells_exit_code))
        
        log_with_timestamp ""
        log_with_timestamp "üèÅ Complete Pipeline Test Summary"
        log_with_timestamp "================================"
        log_with_timestamp "Configuration: ‚úÖ PASS"
        log_with_timestamp "Data Access: ‚úÖ PASS"
        log_with_timestamp "Processors: ‚úÖ PASS"
        log_with_timestamp "Analyzers: ‚úÖ PASS"
        log_with_timestamp "Visualizations: ‚úÖ PASS"
        log_with_timestamp "Notebook Validation: $([ $validation_exit_code -eq 0 ] && echo "‚úÖ PASS" || echo "‚ùå FAIL")"
        log_with_timestamp "Notebook Cells: $([ $cells_exit_code -eq 0 ] && echo "‚úÖ PASS" || echo "‚ùå FAIL")"
        ;;
    3)
        log_with_timestamp "Running quick notebook validation (basic cell syntax)..."
        run_with_logging "timeout 300 python3 notebooks/test_notebook_cells.py"
        test_exit_code=$?
        ;;
    4)
        log_with_timestamp "Running demo readiness check (EPO PATLIB 2025 preparation)..."
        log_with_timestamp "Testing notebook execution simulation..."
        run_with_logging "timeout 600 python3 notebooks/test_notebook_validation.py"
        
        validation_exit_code=$?
        log_with_timestamp ""
        log_with_timestamp "Testing comprehensive cell validation..."
        run_with_logging "timeout 600 python3 notebooks/test_notebook_cells.py"
        
        cells_exit_code=$?
        
        # Use the worse of the two exit codes
        test_exit_code=$((validation_exit_code > cells_exit_code ? validation_exit_code : cells_exit_code))
        ;;
    5)
        log_with_timestamp "Running fix mode - showing available fixes..."
        run_with_logging "python3 notebooks/test_notebook_cells.py --fix"
        log_with_timestamp ""
        log_with_timestamp "Showing fixed cell documentation..."
        run_with_logging "python3 notebooks/notebook_fixed_cells.py"
        test_exit_code=$?
        ;;
    *)
        log_with_timestamp "Running default demo readiness check..."
        run_with_logging "timeout 600 python3 notebooks/test_notebook_validation.py"
        test_exit_code=$?
        ;;
esac

# If we didn't set test_exit_code above, get it from the last command
if [[ -z "$test_exit_code" ]]; then
    test_exit_code=$?
fi

echo ""
echo "üìä Test Execution Summary"
echo "========================="

case $test_exit_code in
    0)
        if [[ $choice == "2" ]] || [[ $choice == "" ]]; then
            echo "üéâ Complete pipeline test completed successfully!"
            echo "‚úÖ Config ‚Üí Data ‚Üí Processors ‚Üí Analyzers ‚Üí Visualizations ‚Üí Notebooks all validated"
            echo "üìì Notebooks tested with complete functional platform"
            echo "üöÄ Demo notebook is ready for EPO PATLIB 2025 presentation!"
        else
            echo "üéâ All notebook tests passed!"
            echo "‚úÖ Demo notebook is ready for EPO PATLIB 2025 presentation!"
        fi
        ;;
    124)
        echo "‚è∞ Tests timed out (15 minute limit exceeded)"
        echo "‚ö†Ô∏è Consider optimizing notebook cell execution or reducing complexity"
        ;;
    130)
        echo "‚ö†Ô∏è Tests interrupted by user (Ctrl+C)"
        ;;
    *)
        if [[ $choice == "2" ]] || [[ $choice == "" ]]; then
            echo "‚ùå Complete pipeline test failed with exit code: $test_exit_code"
            echo "üîç Check which layer failed in the hierarchical execution above"
            echo "üí° Run individual layer tests to isolate the issue"
        else
            echo "‚ùå Notebook tests failed with exit code: $test_exit_code"
            echo "üîç Please review the test output above for details"
            echo "üí° Run with option 5 (fix mode) to see available fixes"
        fi
        ;;
esac

# Demo readiness guidelines
echo ""
echo "‚ö° Demo Readiness Guidelines"
echo "---------------------------"
echo "‚Ä¢ Each cell should execute in <90 seconds for live demo"
echo "‚Ä¢ No undefined variables or missing imports"
echo "‚Ä¢ Graceful error handling for network/database issues"
echo "‚Ä¢ Clear, professional output for audience"
echo "‚Ä¢ Business intelligence focus for non-technical stakeholders"

# Usage examples
echo ""
echo "üí° Usage Examples"
echo "----------------"
echo "# Test notebook cells:"
echo "python3 notebooks/test_notebook_cells.py"
echo ""
echo "# Validate specific notebook:"
echo "python3 notebooks/test_notebook_cells.py --notebook path/to/notebook.ipynb"
echo ""
echo "# Quick cell validation:"
echo "python3 notebooks/test_notebook_validation.py"
echo ""
echo "# Show fixes:"
echo "python3 notebooks/notebook_fixed_cells.py"

# Additional checks
echo ""
echo "üîß Additional Checks"
echo "-------------------"

# Check if notebook can be loaded
python3 -c "import json; json.load(open('notebooks/Patent_Intelligence_Platform_Demo.ipynb'))" 2>/dev/null
if [[ $? -eq 0 ]]; then
    echo "‚úÖ Demo notebook JSON structure is valid"
else
    echo "‚ùå Demo notebook JSON structure issues"
fi

# Check for common notebook issues
if grep -q "NameError" notebooks/Patent_Intelligence_Platform_Demo.ipynb 2>/dev/null; then
    echo "‚ö†Ô∏è Potential NameError found in notebook output"
else
    echo "‚úÖ No obvious NameError issues in notebook"
fi

# Check for output data
if [[ -f "notebooks/test_report.json" ]]; then
    echo "‚úÖ Test report generated successfully"
else
    echo "‚ö†Ô∏è No test report generated (expected after running tests)"
fi

# Final recommendations
echo ""
echo "üìù Next Steps"
echo "------------"
if [[ $test_exit_code -eq 0 ]]; then
    echo "1. ‚úÖ Notebook is demo-ready!"
    echo "2. üé¨ Practice 90-second timing for each cell"
    echo "3. üìä Test with fresh kernel restart"
    echo "4. üåê Verify database connectivity for live demo"
    echo "5. üéØ Prepare backup slides in case of connectivity issues"
else
    echo "1. üîç Review failed notebook tests and fix issues"
    echo "2. üìù Check for undefined variables and missing imports"
    echo "3. üîß Use fix mode to see suggested corrections"
    echo "4. üí¨ Test individual cells in Jupyter environment"
    echo "5. üîÑ Re-run tests after fixes"
fi

# Demo-specific recommendations
echo ""
echo "üé¨ Live Demo Recommendations"
echo "---------------------------"
echo "‚Ä¢ Test database connectivity before presentation"
echo "‚Ä¢ Have backup data ready in case of network issues"
echo "‚Ä¢ Practice cell execution timing (90 seconds each)"
echo "‚Ä¢ Prepare audience-appropriate explanations"
echo "‚Ä¢ Test all visualizations render correctly"
echo "‚Ä¢ Verify export functionality works"

log_with_timestamp ""
log_with_timestamp "=================================================="
log_with_timestamp "Notebooks Test Suite Completed"
log_with_timestamp "Exit code: $test_exit_code"
log_with_timestamp "Full test log available at: $LOG_FILE"

exit $test_exit_code